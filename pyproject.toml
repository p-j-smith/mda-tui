[build-system]
requires = [
  "setuptools >= 40.9.0",
  "setuptools-scm",
  "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "mda-tui"
description = "A textual user interface (TUI) for MDAnalysis"
license = {file = "LICENSE" }
authors = [
    {name = "Paul Smith", email = "paul.j.smith@ucl.ac.uk"},
]
maintainers = [
    {name = "Paul Smith", email = "paul.j.smith@ucl.ac.uk"},
]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "MDAnalysis>=2.6.1",
    "textual",
    "textual-fspicker",
]
keywords = [
    "molecular simulations",
    "textual user interface",
]
dynamic = [
    "version",
]

[project.scripts]
mda = "mda_tui.__main__:main"

[project.optional-dependencies]
test = [
    "asyncio",
    "pytest>=6.0",
    "pytest-asyncio",
    "pytest-xdist>=2.5",
    "pytest-cov>=3.0",
]
doc = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
    "mkdocstrings-python",
    "mkdocs-exclude",
    "mkdocs-rss-plugin",
]
dev =[
    "mda-tui[test,doc]",
    "pre-commit",
]

[project.urls]
source = "https://github.com/p-j-smith/mda-tui"
homepage = "https://p-j-smith.github.io/mda-tui/"
bugtracker = "https://github.com/p-j-smith/mda-tui/issues"
usersupport = "https://github.com/p-j-smith/mda-tui/discussions"
documentation = "https://p-j-smith.github.io/mda-tui/"

[tool.setuptools]
include-package-data = true

[tool.setuptools_scm]
local_scheme = "no-local-version"
write_to = "src/mda_tui/_version.py"

[tool.check-manifest]
ignore = [
    "src/mda_tui/_version.py",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--color=yes -vv --strict-markers"
testpaths = [
    "tests",
]

[tool.coverage.paths]
source = [
    "src",
    ".tox/*/site-packages",
]

[tool.coverage.run]
branch = true
parallel = true
source = ["mda_tui"]

[tool.coverage.report]
skip_covered = false
show_missing = true
sort = "cover"
precision = 2
omit = [
    ".gitignore",
    "tests/",
    "src/mda_tui/_version.py", # Omit generated versioneer
    "versioneer.py",
    "*/__init__.py",
]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise NotImplementedError",
    "except ImportError:",
    "if 0:",
    "if __name__ == .__main__.:",
]
exclude_also = [
    "if TYPE_CHECKING:",
]

[tool.ruff]
target-version = "py39"
fix = true
show-fixes = true
force-exclude = true
line-length = 100
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "versioneer.py",
    "src/mda_tui/_version.py",
]
select = [
    "E", "F", "W", # flake8
    "A",           # flake8-builtins
    "B", "B904",   # flake8-bugbear
    "ARG",         # flake8-unused-arguments
    "C4",          # flake8-comprehensions
    "COM",         # flake8-commas
    "DTZ",         # flake8-datetime
    "EM",          # flake8-errmsg
    "F",           # pyflakes
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "G",           # flake8-logging-format
    "N",           # pep8-naming
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RUF",         # Ruff-specific
    "S",           # flake8-bandit
    "SIM",         # flake8-simplify
    "T20",         # flake8-print
    "TID",         # flake8-tidy-imports
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
    "EXE",         # flake8-executable
    "NPY",         # NumPy specific rules
    "PD",          # pandas-vet
]
ignore = [
    "A002",        # argument `id` is shadowing a Python builtin
    "E501",        # line too long
    "N802",        # function name lowercase
    "N803",        # argument name should be lowercase
    "N806",        # variable in function should be lowercase
    "N813",        # Camelcase `PackageName` imported as lowercase
    "PD002",       # 'inplace=True' should be avoided
    "PD011",       # use '.to_numpy() instead of '.values'
    "PLR0913",     # Too many arguments to function call
    "PLR2004",     # magic value used in comparison
    "PT012",       # pytest.raises() multiline statement
    "RET504",      # unnecessary variable assignment before 'return'
]
flake8-unused-arguments.ignore-variadic-names = true
pep8-naming.classmethod-decorators = [
    "classmethod",
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401",        # unused imports
]
"src/mda-tui/__init__.py" = [
    "E402",        # module level import not at top of file
]
"tests/**" = [
    "PLR2004",     # magic value used in comparison
    "S101",        # use of assert
]
"docs/**" = [
    "I",          # isort
]
"docs/source/conf.py" = [
    "E402",        # module level import not at top of file
    "A001",        # Variable 'copyright' shadows a Python builtin
]

[tool.black]
extend-exclude = "version"
line-length = 100
target-version = ["py39", "py310", "py311"]

[tool.ruff.isort]
force-single-line = false
combine-as-imports = true
force-sort-within-sections = true
order-by-type = true
known-first-party = ["mda_tui"]
